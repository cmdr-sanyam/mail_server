=begin
  <%= controller_class_name %>
  Details for controller

  initCoders Base Project
  Created by initCoders
=end

#Add any require file
<% if namespaced? -%>
require_dependency "<%= namespaced_path %>/application_controller"
<% end -%>

<% module_namespacing do -%>
# <%= controller_class_name %>
class <%= controller_class_name %>Controller < ApplicationController
  # set action or callback function for <%= singular_table_name %>
  before_action :set_<%= singular_table_name %>, only: [:show, :edit, :update, :destroy]

  # GET <%= route_url %>
  # GET <%= route_url %>.json
  # It will provde all <%= singular_table_name %> records with pagination 
  def index
    @<%= plural_table_name %> = <%= orm_class.all(class_name) %>.paginate(:page => params[:page], :per_page => 25)
  end

  # GET <%= route_url %>/1
  # GET <%= route_url %>/1.json
  # It will provde <%= singular_table_name %>  information
  def show
  end

  # GET <%= route_url %>/new
  # It will show form for create new <%= singular_table_name %>
  def new
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>
  end

  # GET <%= route_url %>/1/edit
  # It will show form for edit <%= singular_table_name %>
  def edit
  end

  # POST <%= route_url %>
  # POST <%= route_url %>.json
  # It will create new <%= singular_table_name %>
  def create
    @<%= singular_table_name %> = <%= orm_class.build(class_name, "#{singular_table_name}_params") %>
    respond_to do |format|
      if @<%= orm_instance.save %>
        format.html { redirect_to <%= index_helper %>_path, notice: <%= "'#{human_name} was successfully created.'" %> }
        format.json { render :show, status: :created, location: @<%= singular_table_name %> }
      else
        format.html { render :new }
        format.json { render json: @<%= singular_table_name %>.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT <%= route_url %>/1
  # PATCH/PUT <%= route_url %>/1.json
  # It will update <%= singular_table_name %>
  def update
    respond_to do |format|
      if @<%= orm_instance.update("#{singular_table_name}_params") %>
        format.html { redirect_to <%= index_helper %>_path, notice: <%= "'#{human_name} was successfully updated.'" %> }
        format.json { render :show, status: :ok, location: @<%= singular_table_name %> }
      else
        format.html { render :edit }
        format.json { render json: @<%= singular_table_name %>.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE <%= route_url %>/1
  # DELETE <%= route_url %>/1.json
  # It will delete <%= singular_table_name %>
  def destroy
    @<%= orm_instance.destroy %>
    respond_to do |format|
      format.html { redirect_to <%= index_helper %>_path, notice: <%= "'#{human_name} was successfully deleted.'" %> }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = <%= orm_class.find(class_name, "params[:id]") %>
    end

    # Only allow a trusted parameter "white list" through.
    def <%= "#{singular_table_name}_params" %>
      <%- if attributes_names.empty? -%>
      params.fetch(:<%= singular_table_name %>, {})
      <%- else -%>
      params.require(:<%= singular_table_name %>).permit(<%= attributes_names.map { |name| ":#{name}" }.join(', ') %>)
      <%- end -%>
    end
end
<% end -%>